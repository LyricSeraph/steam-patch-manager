<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.lyriclaw.spm.db.mapper.BasePatchMapper">
  <resultMap id="BaseResultMap" type="top.lyriclaw.spm.db.model.PatchModel">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="app_id" jdbcType="BIGINT" property="appId" />
    <result column="patch_name" jdbcType="VARCHAR" property="patchName" />
    <result column="app_version" jdbcType="VARCHAR" property="appVersion" />
    <result column="patch_version" jdbcType="VARCHAR" property="patchVersion" />
    <result column="reference" jdbcType="VARCHAR" property="reference" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, app_id, patch_name, app_version, patch_version, reference, description, created_at, 
    updated_at
  </sql>
  <select id="selectByExample" parameterType="top.lyriclaw.spm.db.model.PatchModelCriteria" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from project.patch
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from project.patch
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from project.patch
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="top.lyriclaw.spm.db.model.PatchModelCriteria">
    delete from project.patch
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="top.lyriclaw.spm.db.model.PatchModel" useGeneratedKeys="true">
    insert into project.patch (app_id, patch_name, app_version, 
      patch_version, reference, description
      )
    values (#{appId,jdbcType=BIGINT}, #{patchName,jdbcType=VARCHAR}, #{appVersion,jdbcType=VARCHAR}, 
      #{patchVersion,jdbcType=VARCHAR}, #{reference,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="top.lyriclaw.spm.db.model.PatchModel" useGeneratedKeys="true">
    insert into project.patch
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="appId != null">
        app_id,
      </if>
      <if test="patchName != null">
        patch_name,
      </if>
      <if test="appVersion != null">
        app_version,
      </if>
      <if test="patchVersion != null">
        patch_version,
      </if>
      <if test="reference != null">
        reference,
      </if>
      <if test="description != null">
        description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="appId != null">
        #{appId,jdbcType=BIGINT},
      </if>
      <if test="patchName != null">
        #{patchName,jdbcType=VARCHAR},
      </if>
      <if test="appVersion != null">
        #{appVersion,jdbcType=VARCHAR},
      </if>
      <if test="patchVersion != null">
        #{patchVersion,jdbcType=VARCHAR},
      </if>
      <if test="reference != null">
        #{reference,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="top.lyriclaw.spm.db.model.PatchModelCriteria" resultType="java.lang.Long">
    select count(*) from project.patch
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update project.patch
    <set>
      <if test="row.id != null">
        id = #{row.id,jdbcType=INTEGER},
      </if>
      <if test="row.appId != null">
        app_id = #{row.appId,jdbcType=BIGINT},
      </if>
      <if test="row.patchName != null">
        patch_name = #{row.patchName,jdbcType=VARCHAR},
      </if>
      <if test="row.appVersion != null">
        app_version = #{row.appVersion,jdbcType=VARCHAR},
      </if>
      <if test="row.patchVersion != null">
        patch_version = #{row.patchVersion,jdbcType=VARCHAR},
      </if>
      <if test="row.reference != null">
        reference = #{row.reference,jdbcType=VARCHAR},
      </if>
      <if test="row.description != null">
        description = #{row.description,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update project.patch
    set id = #{row.id,jdbcType=INTEGER},
      app_id = #{row.appId,jdbcType=BIGINT},
      patch_name = #{row.patchName,jdbcType=VARCHAR},
      app_version = #{row.appVersion,jdbcType=VARCHAR},
      patch_version = #{row.patchVersion,jdbcType=VARCHAR},
      reference = #{row.reference,jdbcType=VARCHAR},
      description = #{row.description,jdbcType=VARCHAR}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="top.lyriclaw.spm.db.model.PatchModel">
    update project.patch
    <set>
      <if test="appId != null">
        app_id = #{appId,jdbcType=BIGINT},
      </if>
      <if test="patchName != null">
        patch_name = #{patchName,jdbcType=VARCHAR},
      </if>
      <if test="appVersion != null">
        app_version = #{appVersion,jdbcType=VARCHAR},
      </if>
      <if test="patchVersion != null">
        patch_version = #{patchVersion,jdbcType=VARCHAR},
      </if>
      <if test="reference != null">
        reference = #{reference,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="top.lyriclaw.spm.db.model.PatchModel">
    update project.patch
    set app_id = #{appId,jdbcType=BIGINT},
      patch_name = #{patchName,jdbcType=VARCHAR},
      app_version = #{appVersion,jdbcType=VARCHAR},
      patch_version = #{patchVersion,jdbcType=VARCHAR},
      reference = #{reference,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="top.lyriclaw.spm.db.model.PatchModelCriteria" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from project.patch
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>